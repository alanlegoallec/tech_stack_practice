name: CI

on:
  push:
    branches: [main, develop, ci-test]
  pull_request:
    branches: [main, develop, ci-test]

jobs:
  # Job to run unit tests
  # unit-tests:
  #   runs-on: ubuntu-latest
  #   env:
  #     OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
  #     POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
  #   steps:
  #     - uses: actions/checkout@v4

  #     - name: Set up Python
  #       uses: actions/setup-python@v5
  #       with:
  #         python-version: "3.11"

  #     - name: Install Poetry
  #       run: |
  #         curl -sSL https://install.python-poetry.org | python3 -
  #         echo "Poetry installed"

  #     - name: Install backend and frontend dependencies with Poetry
  #       run: |
  #         # Ensure Poetry is used globally
  #         echo "Poetry Version: $(poetry --version)"

  #         # Backend dependencies
  #         cd ./backend
  #         poetry config virtualenvs.create false  # Disable virtualenvs if not already done
  #         poetry install

  #         # Frontend dependencies
  #         cd ../frontend
  #         poetry config virtualenvs.create false  # Disable virtualenvs if not already done
  #         poetry install

  #     - name: Run unit tests
  #       run: |
  #         cd ./backend
  #         pytest tests/unit  # Run unit tests only from the "unit" folder

  # Job to run integration tests
  integration-tests:
    runs-on: ubuntu-latest
    # TODO: Alanneeds: unit-tests # Ensures integration tests run after unit tests pass
    env:
      OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
      POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install Poetry
        run: |
          curl -sSL https://install.python-poetry.org | python3 -
          echo "Poetry installed"

      - name: Install backend and frontend dependencies with Poetry
        run: |
          # Ensure Poetry is used globally
          echo "Poetry Version: $(poetry --version)"

          # Backend dependencies
          cd ./backend
          poetry config virtualenvs.create false  # Disable virtualenvs if not already done
          poetry install

          # Frontend dependencies
          cd ../frontend
          poetry config virtualenvs.create false  # Disable virtualenvs if not already done
          poetry install

      - name: Verify .env.ci content
        run: |
          cat .env.ci

      - name: Start Docker Compose for Integration Tests
        run: |
          docker compose --env-file .env.ci -f docker-compose.yaml up -d  # Start services required for integration tests

      - name: Print Environment Variables
        run: |
          env

      - name: Print environment variables inside the backend container
        run: |
          docker compose exec backend printenv  # This will print environment variables inside the backend container

      - name: Run integration tests
        run: |
          cd ./backend
          pytest tests/integration  # Run integration tests from the "integration" folder

      - name: Stop Docker Compose
        run: docker compose down # Stop the services after tests

  # Build and push Docker images for backend and frontend
  build-and-push:
    runs-on: ubuntu-latest
    needs: integration-tests # Ensure this job runs after integration tests
    environment: production
    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push backend image
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          file: ./backend/Dockerfile
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/my-backend-app:latest

      - name: Build and push frontend image
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          file: ./frontend/Dockerfile
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/my-frontend-app:latest
