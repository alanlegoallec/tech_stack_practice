name: CI

on:
  push:
    branches: [main, develop, ci-test]
  pull_request:
    branches: [main, develop, ci-test]

jobs:
  # linting:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v4

  #     - name: Set up Python
  #       uses: actions/setup-python@v5
  #       with:
  #         python-version: "3.11"

  #     - name: Install Poetry
  #       run: |
  #         curl -sSL https://install.python-poetry.org | python3 -
  #         echo "Poetry installed"

  #     - name: Install backend and frontend dependencies with Poetry
  #       run: |
  #         # Backend dependencies
  #         cd ./backend
  #         poetry config virtualenvs.create false
  #         poetry install

  #         # Frontend dependencies
  #         cd ../frontend
  #         poetry config virtualenvs.create false
  #         poetry install

  #     - name: Install pre-commit hooks
  #       run: |
  #         pip install pre-commit
  #         pre-commit install

  #     - name: Run pre-commit checks
  #       run: |
  #         pre-commit run --all-files

  dependency-scan:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install Poetry
        run: |
          curl -sSL https://install.python-poetry.org | python3 -
          echo "$HOME/.local/bin" >> $GITHUB_PATH

      - name: Install dependencies
        run: |
          cd backend
          poetry install

      - name: Install Trivy
        run: |
          sudo apt-get install wget apt-transport-https gnupg lsb-release
          wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add -
          echo deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main | sudo tee -a /etc/apt/sources.list.d/trivy.list
          sudo apt-get update
          sudo apt-get install trivy

      - name: Run Trivy vulnerability scan
        run: |
          trivy fs --exit-code 1 --no-progress .

  # test-coverage:
  #   runs-on: ubuntu-latest
  #   #needs: linting # Only run if linting job passes
  #   env:
  #     OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
  #     POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
  #   steps:
  #     - uses: actions/checkout@v4

  #     - name: Set up Python
  #       uses: actions/setup-python@v5
  #       with:
  #         python-version: "3.11"

  #     - name: Install Poetry
  #       run: |
  #         curl -sSL https://install.python-poetry.org | python3 -

  #     - name: Install dependencies
  #       run: |
  #         # Install backend dependencies
  #         cd ./backend
  #         poetry install

  #     - name: Rename .env.ci to .env
  #       run: mv .env.ci .env

  #     - name: Run backend tests with coverage
  #       run: make test-coverage

  #     - name: Upload coverage reports to Codecov
  #       uses: codecov/codecov-action@v5
  #       with:
  #         token: ${{ secrets.CODECOV_TOKEN }}
  #         file: ./backend/coverage.xml # Specify the coverage report file

  # # Job to run unit tests
  # unit-tests:
  #   runs-on: ubuntu-latest
  #   env:
  #     OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
  #     POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
  #   steps:
  #     - uses: actions/checkout@v4

  #     - name: Set up Python
  #       uses: actions/setup-python@v5
  #       with:
  #         python-version: "3.11"

  #     - name: Install Poetry
  #       run: |
  #         curl -sSL https://install.python-poetry.org | python3 -
  #         echo "Poetry installed"

  #     - name: Install backend and frontend dependencies with Poetry
  #       run: |
  #         # Ensure Poetry is used globally
  #         echo "Poetry Version: $(poetry --version)"

  #         # Backend dependencies
  #         cd ./backend
  #         poetry config virtualenvs.create false  # Disable virtualenvs if not already done
  #         poetry install

  #         # Frontend dependencies
  #         cd ../frontend
  #         poetry config virtualenvs.create false  # Disable virtualenvs if not already done
  #         poetry install

  #     - name: Run unit tests
  #       run: |
  #         cd ./backend
  #         pytest tests/unit  # Run unit tests only from the "unit" folder

  # # Job to run integration tests
  # integration-tests:
  #   runs-on: ubuntu-latest
  #   needs: unit-tests # Ensures integration tests run after unit tests pass
  #   env:
  #     OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
  #     POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
  #   steps:
  #     - uses: actions/checkout@v4

  #     - name: Set up Python
  #       uses: actions/setup-python@v5
  #       with:
  #         python-version: "3.11"

  #     - name: Install Poetry
  #       run: |
  #         curl -sSL https://install.python-poetry.org | python3 -
  #         echo "Poetry installed"

  #     - name: Install backend and frontend dependencies with Poetry
  #       run: |
  #         # Ensure Poetry is used globally
  #         echo "Poetry Version: $(poetry --version)"

  #         # Backend dependencies
  #         cd ./backend
  #         poetry config virtualenvs.create false  # Disable virtualenvs if not already done
  #         poetry install

  #         # Frontend dependencies
  #         cd ../frontend
  #         poetry config virtualenvs.create false  # Disable virtualenvs if not already done
  #         poetry install

  #     - name: Rename .env.ci to .env
  #       run: mv .env.ci .env

  #     - name: Run integration tests in Docker
  #       run: |
  #         docker compose -f docker-compose.yaml --profile dev run --rm tests

  #     - name: Shut down Docker Compose
  #       if: always()
  #       run: |
  #         docker compose -f docker-compose.yaml --profile dev down --volumes --remove-orphans

  # Job to check if the full stack is up and running
  stack-up-check:
    runs-on: ubuntu-latest
    # TODO: Alan - needs: integration-tests # Ensure this job runs after integration tests pass
    env:
      OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
      POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
    steps:
      - uses: actions/checkout@v4
      - name: Rename .env.ci to .env
        run: mv .env.ci .env
      - name: Start full stack
        run: |
          docker compose -f docker-compose.yaml --profile dev up -d
      - name: Wait a bit and run a health check
        run: |
          for i in {1..10}; do
            curl -f http://localhost:8000/health && break || sleep 5;
          done
      - name: Tear down
        if: always()
        run: |
          docker compose -f docker-compose.yaml --profile dev down --volumes --remove-orphans

  # Build and push Docker images for backend and frontend
  build-and-push:
    runs-on: ubuntu-latest
    # needs: integration-tests # Ensure this job runs after integration tests pass
    environment: production
    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push backend image
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          file: ./backend/Dockerfile
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/my-backend-app:latest

      - name: Build and push frontend image
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          file: ./frontend/Dockerfile
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/my-frontend-app:latest
